<?xml version="1.0" encoding="UTF-8"?>
<Bucket
   type = "1"
   version = "2.0">
   <Breakpoints>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.ExceptionBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            scope = "0"
            stopOnStyle = "0">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.SymbolicBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            symbolName = "malloc_error_break"
            moduleName = "">
            <Locations>
               <Location
                  shouldBeEnabled = "Yes"
                  ignoreCount = "0"
                  continueAfterRunningActions = "No"
                  symbolName = "malloc_error_break"
                  moduleName = "libsystem_malloc.dylib"
                  usesParentBreakpointCondition = "Yes"
                  offsetFromSymbolStart = "0">
               </Location>
            </Locations>
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "DLib/DLibWrapper.mm"
            timestampString = "542228686.367162"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "196"
            endingLineNumber = "196"
            landmarkName = "@implementation KeyPointOptimizer - (void)testPolyval { matrix&lt;double&gt; p = {3,0,1}; cout &lt;&lt; &quot;p: \n&quot; &lt;&lt; p &lt;&lt; endl; matrix&lt;double&gt; x = {5,9,8}; cout &lt;&lt; &quot;x: \n&quot; &lt;&lt; x &lt;&lt; endl; matrix&lt;double&gt; res = polyval(p,x); cout &lt;&lt; &quot;res:: &quot; &lt;&lt; endl; cout &lt;&lt; &quot;\n------\n&quot; &lt;&lt; endl; cout &lt;&lt; res &lt;&lt; endl; cout &lt;&lt; &quot;------&quot; &lt;&lt; endl; } - (void)testHStack { matrix&lt;double&gt; p = {3,0,1}; cout &lt;&lt; &quot;p: \n&quot; &lt;&lt; p &lt;&lt; endl; matrix&lt;double, 3, 2&gt; x = matrix&lt;double, 3, 2&gt;({0,5, 3,3, 1,9}); cout &lt;&lt; &quot;x: \n&quot; &lt;&lt; x &lt;&lt; endl; matrix&lt;double&gt; stack = hstack(x, p); cout &lt;&lt; &quot;stack:: &quot; &lt;&lt; endl; cout &lt;&lt; &quot;\n------\n&quot; &lt;&lt; endl; cout &lt;&lt; stack &lt;&lt; endl; cout &lt;&lt; &quot;------&quot; &lt;&lt; endl; } - (void)testResize { NSArray &lt;NSValue *&gt; *values = @[[NSValue valueWithCGPoint:CGPointMake(4, 7)], [NSValue valueWithCGPoint:CGPointMake(3, 6)], [NSValue valueWithCGPoint:CGPointMake(8, 4)], [NSValue valueWithCGPoint:CGPointMake(25, 53)], [NSValue valueWithCGPoint:CGPointMake(34, 64)], [NSValue valueWithCGPoint:CGPointMake(12, 54)], [NSValue valueWithCGPoint:CGPointMake(90, 43)], [NSValue valueWithCGPoint:CGPointMake(12, 21)], [NSValue valueWithCGPoint:CGPointMake(34, 12)], [NSValue valueWithCGPoint:CGPointMake(3, 5)], [NSValue valueWithCGPoint:CGPointMake(1, 4)], [NSValue valueWithCGPoint:CGPointMake(0, 3)]]; matrix&lt;double&gt; output = reshape(convertTo(values), values.count, 2); cout &lt;&lt; &quot;output:: &quot; &lt;&lt; endl; cout &lt;&lt; &quot;\n------\n&quot; &lt;&lt; endl; cout &lt;&lt; output &lt;&lt; endl; cout &lt;&lt; &quot;------&quot; &lt;&lt; endl; } - (void)optimize:(NSArray &lt;NSNumber *&gt; *)params to:(NSArray &lt;NSValue *&gt; *)dstPoints keyPointIdx:(NSArray &lt;NSValue *&gt; *)keyPointIndexes { //[self testPolyval]; //[self testHStack]; //[self testResize]; // column_vector target_vector; // column_vector starting_point = convertTo(params); // auto be_like_target = [&amp;](const column_vector&amp; x) { // return mean(squared(x-target_vector)); // }; // find_min_bobyqa(be_like_target, // starting_point, // 9, // number of interpolation points // uniform_matrix&lt;double&gt;(4,1, -1e100), // lower bound constraint // uniform_matrix&lt;double&gt;(4,1, 1e100), // upper bound constraint // 10, // initial trust region radius // 1e-6, // stopping trust region radius // 100 // max number of objective function evaluations // ); // cout &lt;&lt; &quot;be_like_target solution:\n&quot; &lt;&lt; starting_point &lt;&lt; endl; } - (NSArray &lt;NSValue *&gt; *)projectKeypoints:(NSArray &lt;NSValue *&gt; *)keyPoints of:(NSArray &lt;NSNumber *&gt; *)vectors { NSMutableArray &lt;NSValue *&gt; *projectedValues = @[].mutableCopy; for (NSValue *value in keyPoints) { int x = value.CGPointValue.x; int y = value.CGPointValue.y; float xvec = vectors[x].floatValue; float yvec = vectors[y].floatValue; CGPoint projectedPoint = CGPointMake(xvec, yvec); [projectedValues addObject:[NSValue valueWithCGPoint:projectedPoint]]; } [projectedValues replaceObjectAtIndex:0 withObject:[NSValue valueWithCGPoint:CGPointZero]]; return [self projectXY:projectedValues of:vectors]; } - (NSArray &lt;NSValue *&gt; *)projectXY:(NSArray &lt;NSValue *&gt; *)xyCoordsArr of:(NSArray &lt;NSNumber *&gt; *)vectors { // get cubic polynomial coefficients given // // f(0) = 0, f&apos;(0) = alpha // f(1) = 0, f&apos;(1) = beta /** RVEC_IDX = slice(0, 3) # index of rvec in params vector TVEC_IDX = slice(3, 6) # index of tvec in params vector CUBIC_IDX = slice(6, 8) # index of cubic slopes in params vector */ // slice [6] and [7] float alpha = vectors[6].floatValue; float beta = vectors[7].floatValue; column_vector poly = {alpha + beta, -2*alpha - beta, alpha, 0}; NSArray &lt;NSNumber *&gt; *xCoordsArr = numbersAlongAxis(0, xyCoordsArr); matrix&lt;double&gt; xCoords = convertTo(xCoordsArr); matrix&lt;double&gt; zCoords = polyval(poly, xCoords); matrix&lt;double&gt; xyCoords = reshape(convertTo(xyCoordsArr), xyCoordsArr.count, 2); matrix&lt;double&gt; objPoints = hstack(xyCoords, zCoords); // [xyCoords + zCoords] return @[]; } @end"
            landmarkType = "3">
         </BreakpointContent>
      </BreakpointProxy>
      <BreakpointProxy
         BreakpointExtensionID = "Xcode.Breakpoint.FileBreakpoint">
         <BreakpointContent
            shouldBeEnabled = "Yes"
            ignoreCount = "0"
            continueAfterRunningActions = "No"
            filePath = "SwiftVision/PageDewarp/models/ContourSpanInfo.mm"
            timestampString = "542830956.865868"
            startingColumnNumber = "9223372036854775807"
            endingColumnNumber = "9223372036854775807"
            startingLineNumber = "84"
            endingLineNumber = "84"
            landmarkName = "-testDefaultParameters"
            landmarkType = "7">
         </BreakpointContent>
      </BreakpointProxy>
   </Breakpoints>
</Bucket>
